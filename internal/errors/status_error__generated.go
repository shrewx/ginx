// Code generated by tools. DO NOT EDIT!
package errors

import (
	"fmt"
	"github.com/nicksnyder/go-i18n/v2/i18n"
	"github.com/shrewx/ginx/pkg/i18nx"
	"github.com/shrewx/ginx/pkg/statuserror"
	"strconv"
)

func init() {
	i18nx.RegisterHooks(RegisterErrorMessages)
}

func (v StatusError) WithParams(params map[string]interface{}) statuserror.CommonError {
	return statuserror.NewStatusErr(v.Key(), v.Code()).WithParams(params)
}

func (v StatusError) WithField(key interface{}, value string) statuserror.CommonError {
	return statuserror.NewStatusErr(v.Key(), v.Code()).WithField(key, value)
}

func (v StatusError) Localize(manager *i18nx.Localize, lang string) i18nx.I18nMessage {
	return statuserror.NewStatusErr(v.Key(), v.Code()).Localize(manager, lang)
}

func (v StatusError) LocalizeValue(value interface{}) statuserror.CommonError {
	return statuserror.NewStatusErr(v.Key(), v.Code()).WithParams(map[string]interface{}{"Value": value})
}

func (v StatusError) LocalizeData(data map[string]interface{}) statuserror.CommonError {
	return statuserror.NewStatusErr(v.Key(), v.Code()).WithParams(data)
}

func (v StatusError) StatusCode() int {
	return statuserror.NewStatusErr(v.Key(), v.Code()).StatusCode()
}

func (v StatusError) Key() string {
	switch v {
	case BadRequest:
		return "BadRequest"
	case Unauthorized:
		return "Unauthorized"
	case Forbidden:
		return "Forbidden"
	case NotFound:
		return "NotFound"
	case Conflict:
		return "Conflict"
	case InternalServerError:
		return "InternalServerError"
	}
	return "UNKNOWN"
}

func (v StatusError) Prefix() string {
	return "error_codes"
}

func (v StatusError) ID() string {
	if v.Prefix() == "" {
		return strconv.FormatInt(int64(v.Code()), 10)
	}
	return v.Prefix() + "." + strconv.FormatInt(int64(v.Code()), 10)
}

func (v StatusError) Code() int64 {
	return int64(v)
}

func (v StatusError) Error() string {
	return statuserror.NewStatusErr(v.Key(), v.Code()).Error()
}

func (v StatusError) Value() string {
	return statuserror.NewStatusErr(v.Key(), v.Code()).Value()
}

func GetStatusErrorENMessages() []*i18n.Message {
	var messages []*i18n.Message

	messages = append(messages, &i18n.Message{ID: fmt.Sprintf("en.%s", BadRequest.ID()), Other: "bad request"})
	messages = append(messages, &i18n.Message{ID: fmt.Sprintf("en.%s", Unauthorized.ID()), Other: "unauthorized"})
	messages = append(messages, &i18n.Message{ID: fmt.Sprintf("en.%s", Forbidden.ID()), Other: "forbidden"})
	messages = append(messages, &i18n.Message{ID: fmt.Sprintf("en.%s", NotFound.ID()), Other: "not found"})
	messages = append(messages, &i18n.Message{ID: fmt.Sprintf("en.%s", Conflict.ID()), Other: "conflict"})
	messages = append(messages, &i18n.Message{ID: fmt.Sprintf("en.%s", InternalServerError.ID()), Other: "internal server error"})
	return messages
}

func GetStatusErrorZHMessages() []*i18n.Message {
	var messages []*i18n.Message

	messages = append(messages, &i18n.Message{ID: fmt.Sprintf("zh.%s", BadRequest.ID()), Other: "请求参数错误"})
	messages = append(messages, &i18n.Message{ID: fmt.Sprintf("zh.%s", Unauthorized.ID()), Other: "未授权，请先授权"})
	messages = append(messages, &i18n.Message{ID: fmt.Sprintf("zh.%s", Forbidden.ID()), Other: "禁止操作"})
	messages = append(messages, &i18n.Message{ID: fmt.Sprintf("zh.%s", NotFound.ID()), Other: "资源未找到"})
	messages = append(messages, &i18n.Message{ID: fmt.Sprintf("zh.%s", Conflict.ID()), Other: "资源冲突"})
	messages = append(messages, &i18n.Message{ID: fmt.Sprintf("zh.%s", InternalServerError.ID()), Other: "未知的异常信息：请联系技术服务工程师进行排查"})
	return messages
}

func RegisterErrorMessages() {
	i18nx.AddMessages("en", GetStatusErrorENMessages())
	i18nx.AddMessages("zh", GetStatusErrorZHMessages())
}
