// Code generated by tools. DO NOT EDIT!
package fields

import (
	"github.com/shrewx/ginx/pkg/i18nx"
	"github.com/nicksnyder/go-i18n/v2/i18n"
)

func init() {
	i18nx.RegisterHooks(RegisterI18nMessages)
}

func (v CommonField) Localize(manager *i18nx.Localize, lang string) i18nx.I18nMessage {
	return i18nx.NewMessage(v.Key(), v.Prefix()).Localize(manager, lang)
}

func (v CommonField) Key() string {
	return string(v)
}

func (v CommonField) Prefix() string {
	return "errors.references"
}

func (v CommonField) ID() string {
	if v.Prefix() == "" {
		return v.Key()
	}
	return v.Prefix() + "." + v.Key()
}

func (v CommonField) Value() string {
	return i18nx.NewMessage(v.Key(), v.Prefix()).Value()
}

func (v CommonField) Message(lang string) string {
	return v.Localize(i18nx.Instance(), lang).Value()
}

func GetCommonFieldMap() map[string]map[CommonField]string {
	return map[string]map[CommonField]string{
		"en": {
			ErrorIndex: "index",
			ErrorLine: "line",
			
		},
		"zh": {
			ErrorIndex: "索引",
			ErrorLine: "行",
			
		},
		
	}
}

func RegisterI18nMessages() {
	messageMap := GetCommonFieldMap()
	for lang, messages := range messageMap {
		var i18nMessages []*i18n.Message
		for key, message := range messages {
			i18nMessages = append(i18nMessages, &i18n.Message{ID: key.ID(), Other: message})
		}
		i18nx.AddMessages(lang, i18nMessages)
	}
}
