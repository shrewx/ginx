package i18nx

const I18nTemplate = `// Code generated by tools. DO NOT EDIT!
package {{ .Package }}

import (
	"github.com/shrewx/ginx/pkg/i18nx"
	"github.com/nicksnyder/go-i18n/v2/i18n"
)

func init() {
	i18nx.RegisterHooks(RegisterI18nMessages)
}

func (v {{ .ClassName }}) Localize(manager *i18nx.Localize, lang string) i18nx.I18nMessage {
	return i18nx.NewMessage(v.Key(), v.Prefix()).Localize(manager, lang)
}

func (v {{ .ClassName }}) Key() string {
	return string(v)
}

func (v {{ .ClassName }}) Prefix() string {
	return "{{ .Prefix }}"
}

func (v {{ .ClassName }}) ID() string {
	if v.Prefix() == "" {
		return v.Key()
	}
	return v.Prefix() + "." + v.Key()
}

func (v {{ .ClassName }}) Value() string {
	return i18nx.NewMessage(v.Key(), v.Prefix()).Value()
}

func (v {{ .ClassName }}) Message(lang string) string {
	return v.Localize(i18nx.Instance(), lang).Value()
}

func Get{{ .ClassName }}Map() map[string]map[{{ .ClassName }}]string {
	return map[string]map[{{ .ClassName }}]string{
		{{range $lang, $error := .Messages}}"{{$lang}}": {
			{{range $error}}{{.T}}: "{{.Message}}",
			{{end}}
		},
		{{end}}
	}
}

func RegisterI18nMessages() {
	messageMap := Get{{ .ClassName }}Map()
	for lang, messages := range messageMap {
		var i18nMessages []*i18n.Message
		for key, message := range messages {
			i18nMessages = append(i18nMessages, &i18n.Message{ID: key.ID(), Other: message})
		}
		i18nx.AddMessages(lang, i18nMessages)
	}
}
`
