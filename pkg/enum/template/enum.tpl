// Package {{ .Package }} Code generated by tools. DO NOT EDIT!!!!
package {{ .Package }}
import ({{if eq .BasicType "string"}}"bytes"{{else}}
    "encoding/json"{{end}}
	"database/sql/driver"

	"github.com/shrewx/ginx/pkg/enum"
)

func (v {{ .ClassName }}) Int() int {
	return {{if eq .BasicType "string"}}0{{else}}int(v){{end}}
}

func (v {{ .ClassName }}) String() string {
	switch v { {{range .Keypair}}
	case {{ .Key }}:
		return "{{ .StringValue }}"{{end}}
	}
	return ""
}

func (v {{ .ClassName }}) Label() string {
	switch v { {{range .Keypair}}
	case {{ .Key }}:
		return "{{ .Label }}"{{end}}
	}
	return ""
}

func (v {{ .ClassName }}) Values() []enum.Enum {
	return []enum.Enum{ {{ .Keys }} }
}

func (v {{ .ClassName }}) Type() string {
	return "{{ .Type }}"
}
{{if eq .BasicType "string"}}
func (v {{ .ClassName }}) MarshalText() ([]byte, error) {
	switch v {
	case {{ .Keys }}:
		return []byte(v.String()), nil
	default:
		return nil, enum.InvalidTypeError
	}
}

func (v *{{ .ClassName }}) UnmarshalText(text []byte) error {
	switch string({{if eq .BasicType "string"}}text{{else}}bytes.ToUpper(text){{end}}) { {{range .Keypair}}
	case {{ .Key }}.String():
		*v = {{ .Key }}{{end}}
	default:
		return enum.InvalidTypeError
	}

	return nil
}{{else}}
func (v {{ .ClassName }}) MarshalJSON() ([]byte, error) {
    switch v {
    case {{ .Keys }}:
        return json.Marshal(v.Int())
    default:
        return nil, enum.InvalidTypeError
    }
}

func (v *{{ .ClassName }}) UnmarshalJSON(data []byte) error {
    var tmp {{ .ClassName }}
	if err := json.Unmarshal(data, &tmp); err != nil {
		return err
	}
    switch tmp {
    case {{ .Keys }}:
        *v = tmp
    default:
        return enum.InvalidTypeError
    }
    return nil
}{{end}}
{{if eq .BasicType "string"}}
func (v *{{ .ClassName }}) Scan(value interface{}) error {
	*v = {{ .ClassName }}(value.({{ .BasicType }}))
	return nil
}{{else}}
func (v *{{ .ClassName }}) Scan(value interface{}) error {
	if value == nil {
		*v = {{ .ClassName }}(0)
		return nil
	}

	i, err := enum.ToInt64(value)
	if err != nil {
		return err
	}
	*v = {{ .ClassName }}(i)

	return nil
}{{end}}

func (v *{{ .ClassName }}) Value() (driver.Value, error) {
	return {{ .BasicType }}(*v), nil
}