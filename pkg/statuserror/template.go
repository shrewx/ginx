package statuserror

const StatusErrorTemplate = `// Code generated by tools. DO NOT EDIT!
package {{ .Package }}

import (
	"fmt"
	"github.com/shrewx/ginx/pkg/i18nx"
	"github.com/shrewx/ginx/pkg/statuserror"
	"github.com/nicksnyder/go-i18n/v2/i18n"
	"strconv"
)

func init() {
	i18nx.RegisterHooks(RegisterErrorMessages)
}

func (v {{ .ClassName }}) WithParams(params map[string]interface{}) statuserror.CommonError {
	return statuserror.NewStatusErr(v.Key(), v.Code()).WithParams(params)
}

func (v {{ .ClassName }}) WithField(key interface{}, value string) statuserror.CommonError {
	return statuserror.NewStatusErr(v.Key(), v.Code()).WithField(key, value)
}

func (v {{ .ClassName }}) Localize(manager *i18nx.Localize, lang string) i18nx.I18nMessage {
	return statuserror.NewStatusErr(v.Key(), v.Code()).Localize(manager, lang)
}

func (v {{ .ClassName }}) LocalizeValue(value interface{}) statuserror.CommonError {
	return statuserror.NewStatusErr(v.Key(), v.Code()).WithParams(map[string]interface{}{"Value": value})
}

func (v {{ .ClassName }}) LocalizeData(data map[string]interface{}) statuserror.CommonError {
	return statuserror.NewStatusErr(v.Key(), v.Code()).WithParams(data)
}

func (v {{ .ClassName }}) StatusCode() int {
	return statuserror.NewStatusErr(v.Key(), v.Code()).StatusCode()
}

func (v {{ .ClassName }}) Key() string {
	switch v { {{range .Errors}}
	case {{ .Key}}:
		return "{{ .Key}}"{{end}}
	}
	return "UNKNOWN"
}

func (v {{ .ClassName }}) Prefix() string {
	return "{{ .Prefix }}"
}

func (v {{ .ClassName }}) ID() string {
	if v.Prefix() == "" {
		return strconv.FormatInt(int64(v.Code()), 10)
	}
	return v.Prefix() + "." + strconv.FormatInt(int64(v.Code()), 10)
}

func (v {{ .ClassName }}) Code() int64 {
	return int64(v)
}

func (v {{ .ClassName }}) Error() string {
	return statuserror.NewStatusErr(v.Key(), v.Code()).Error()
}

func (v {{ .ClassName }}) Value() string {
	return statuserror.NewStatusErr(v.Key(), v.Code()).Value()
}

func Get{{ .ClassName }}Map() map[string]map[{{ .ClassName }}]string {
	return map[string]map[{{ .ClassName }}]string{
		{{range $lang, $error := .Messages}}"{{$lang}}": {
			{{range $error}}{{.K}}: "{{.Message}}",
			{{end}}
		},
		{{end}}
	}
}

func RegisterErrorMessages() {
	errorMap := Get{{ .ClassName }}Map()
	for lang, messages := range errorMap {
		var i18nMessages []*i18n.Message
		for key, message := range messages {
			i18nMessages = append(i18nMessages, &i18n.Message{ID: fmt.Sprintf("%s.%s", lang, key.ID()), Other: message})
		}
		i18nx.AddMessages(lang, i18nMessages)
	}
}
`
